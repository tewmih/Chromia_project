query get_all_users() {
    return user @* { } ( $.to_struct() );
    //6,12
}

query get_specific_user(user_id: byte_array): user_dto {
    return user @ { .id == user_id } (
        user_dto (
            name = user.name,
            id = user.id,
            account = account_struct(
            id = user.account.id,
            type = user.account.type
        )
        )
    );
}

//task related functions
//1
query get_all_tasks(
    user_id: byte_array,
    pointer: integer,
    task_number: integer
): (pointer: integer, tasks: list<task_dto>) {
    val tasks = task @* { .user.id == user_id } (
        @sort_desc @omit .rowid,
        task_dto (
            task.id,
            task.title,
            task.description,
            task.status,
            task.due_date,
            task.priority_val
        )
    ) offset pointer limit task_number;
    return (
        pointer = pointer + tasks.size(),
        tasks = tasks
    );
}

query get_single_task_by_id(user_id: byte_array, task_id: byte_array): task {
    return task @ { .id == task_id, .id == user_id };
}

query get_completed_tasks(
    user_id: byte_array,
    pointer: integer,
    n_tasks: integer
): (pointer: integer, tasks: list<task_dto>) {
    val tasks = task @* { .status == is_completed.completed, .user.id == user_id } (
        @sort_desc @omit task.rowid,
        task_dto (
            task.id,
            task.title,
            task.description,
            task.status,
            task.due_date,
            task.priority_val
        )
    ) offset pointer limit n_tasks;
    return (
        pointer = pointer + tasks.size(),
        tasks = tasks
    );
}

query get_pending_tasks(
    status: is_completed,
    pointer: integer,
    n_tasks: integer
): (pointer: integer, tasks: list<task_dto>) {
    val tasks = task @* { .status == is_completed.pending } (
        @sort_desc @omit task.rowid,
        task_dto (
            task.id,
            task.title,
            task.description,
            task.status,
            task.due_date,
            task.priority_val
        )
    ) offset pointer limit n_tasks;
    return (
        pointer = pointer + tasks.size(),
        tasks = tasks
    );
}

query get_high_priority_tasks(pointer: integer, n_tasks: integer): (pointer: integer, tasks: list<task_dto>) {
    val tasks = task @* { .priority_val == priority.high, } (
        @sort_desc @omit task.rowid,
        task_dto (
            task.id,
            task.title,
            task.description,
            task.status,
            task.due_date,
            task.priority_val
        )
    ) offset pointer limit n_tasks;
    return (
        pointer = pointer + tasks.size(),
        tasks = tasks
    );
}

query get_medium_priority_tasks(pointer: integer, n_tasks: integer): (pointer: integer, tasks: list<task_dto>) {
    val tasks = task @* { .priority_val == priority.high, } (
        @sort_desc @omit task.rowid,
        task_dto (
            task.id,
            task.title,
            task.description,
            task.status,
            task.due_date,
            task.priority_val
        )
    ) offset pointer limit n_tasks;
    return (
        pointer = pointer + tasks.size(),
        tasks = tasks
    );
}

query get_low_priority_tasks(pointer: integer, n_tasks: integer): (pointer: integer, tasks: list<task_dto>) {
    val tasks = task @* { .priority_val == priority.high, } (
        @sort_desc @omit task.rowid,
        task_dto (
            task.id,
            task.title,
            task.description,
            task.status,
            task.due_date,
            task.priority_val
        )
    ) offset pointer limit n_tasks;
    return (
        pointer = pointer + tasks.size(),
        tasks = tasks
    );
}

query get_tasks_by_due_date(
    status: text,
    pointer: integer,
    n_tasks: integer
): (pointer: integer, tasks: list<task_dto>) {
    val tasks = task @* { .due_date == .due_date } (
        @sort_desc @omit task.rowid,
        task_dto (
            task.id,
            task.title,
            task.description,
            task.status,
            task.due_date,
            task.priority_val,
        )
    ) offset pointer limit n_tasks;
    return (
        pointer = pointer + tasks.size(),
        tasks = tasks
    );
}

query get_upcoming_tasks(
    user_id: byte_array,
    pointer: integer,
    n_tasks: integer
): (pointer:integer, tasks:list<task_dto>) {
    val tasks = task @* { .user.id == user_id, .due_date > last_known_time(), .status == is_completed.pending } (
        @sort_desc @omit task.rowid,
        task_dto (
            task.id,
            task.title,
            task.description,
            task.status,
            task.due_date,
            task.priority_val,
        )
    ) offset pointer limit n_tasks;
    return (
        pointer = pointer + tasks.size(),
        tasks = tasks
    );
}

query number_of_completed_tasks(user_id: byte_array) {
    return task @ { .status == is_completed.completed, .user.id == user_id } ( @sum 1 );
}


query number_of_pending_tasks(user_id: byte_array) {
    return task @ { .status == is_completed.pending, .user.id == user_id } ( @sum 1 );
}

query number_of_expired_tasks(user_id: byte_array) {
    return task @ { .status == is_completed.expired, .user.id == user_id } ( @sum 1 );
}
